'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _chReactAce = require('ch-react-ace');

var _chReactAce2 = _interopRequireDefault(_chReactAce);

var _jsonlintMod = require('jsonlint-mod');

var _jsonlintMod2 = _interopRequireDefault(_jsonlintMod);

require('ch-brace/mode/json');

require('ch-brace/theme/tomorrow');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var debounce = function debounce(func, wait) {
  var timer = null;

  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    timer && clearTimeout(timer);

    timer = setTimeout(function () {
      func.apply(undefined, args);
    }, wait);
  };
};

var STYLE = '\n.doc-wrapper .ace_editor {\n  margin: 10px auto;\n}\n\n.error-msg {\n  color: #c5695c;\n}\n';

var JsonDoc = function (_Component) {
  _inherits(JsonDoc, _Component);

  function JsonDoc(props, ctx) {
    _classCallCheck(this, JsonDoc);

    var _this = _possibleConstructorReturn(this, (JsonDoc.__proto__ || Object.getPrototypeOf(JsonDoc)).call(this, props, ctx));

    var debounceWaitTime = props.debounceWaitTime,
        code = props.code;


    _this.state = {
      code: props.code,
      errorMsg: ''
    };

    _this.handleCompile = _this.handleCompile.bind(_this);
    return _this;
  }

  _createClass(JsonDoc, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var code = this.props.code;


      this.handleCompile(code);
    }
  }, {
    key: 'updateCode',
    value: function updateCode(updator) {
      var newCode = updator(this.state.code);

      this.handleCompile(newCode);
    }
  }, {
    key: 'handleCompile',
    value: function handleCompile(code) {
      this.setState({
        code: code
      });

      try {
        _jsonlintMod2.default.parse(code);

        this.setState({
          errorMsg: ''
        });
        this.props.onChange(code);
      } catch (e) {
        this.setState({
          errorMsg: e.message || e.toString()
        });
      }
    }
  }, {
    key: 'formate',
    value: function formate(code) {
      return JSON.stringify(code || this.state.code, '', 2);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          code = _props.code,
          className = _props.className,
          showGutter = _props.showGutter,
          onChange = _props.onChange,
          name = _props.name,
          rest = _objectWithoutProperties(_props, ['code', 'className', 'showGutter', 'onChange', 'name']);

      var errorMsg = this.state.errorMsg;


      return _react2.default.createElement(
        'div',
        { className: 'doc-wrapper ' + className },
        _react2.default.createElement(_chReactAce2.default, _extends({
          value: this.state.code,
          mode: 'json',
          theme: 'tomorrow',
          width: '650px',
          tabSize: 2,
          name: name,
          showPrintMargin: false,
          showGutter: showGutter,
          setOptions: {
            useWorker: false
          },
          editorProps: {
            $blockScrolling: true
          },
          onChange: this.handleCompile
        }, rest)),
        _react2.default.createElement(
          'div',
          {
            className: 'doc-error'
          },
          errorMsg ? _react2.default.createElement(
            'span',
            { className: 'error-msg' },
            errorMsg
          ) : null
        ),
        _react2.default.createElement(
          'style',
          null,
          STYLE
        )
      );
    }
  }]);

  return JsonDoc;
}(_react.Component);

JsonDoc.propTypes = {
  code: _react.PropTypes.string,
  debounceWaitTime: _react.PropTypes.number,
  showGutter: _react.PropTypes.bool,
  onChange: _react.PropTypes.func,
  name: _react.PropTypes.string
};
JsonDoc.defaultProps = {
  debounceWaitTime: 50,
  showGutter: true,
  code: '',
  onChange: function onChange() {},
  name: 'ace-json-editor'
};
exports.default = JsonDoc;