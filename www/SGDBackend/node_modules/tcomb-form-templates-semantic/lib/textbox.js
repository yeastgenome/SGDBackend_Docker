'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _getLabel = require('./getLabel');

var _getLabel2 = _interopRequireDefault(_getLabel);

var _getError = require('./getError');

var _getError2 = _interopRequireDefault(_getError);

var _getHelp = require('./getHelp');

var _getHelp2 = _interopRequireDefault(_getHelp);

function create() {
  var overrides = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  function textbox(locals) {
    locals.attrs = textbox.getAttrs(locals);

    if (locals.type === 'hidden') {
      return textbox.renderHiddenTextbox(locals);
    }

    return textbox.renderVertical(locals);
  }

  textbox.getAttrs = overrides.getAttrs || function getAttrs(locals) {
    var attrs = _extends({}, locals.attrs);
    attrs.className = _classnames2['default'](attrs.className);
    attrs.type = locals.type;
    attrs.disabled = locals.disabled;
    if (locals.type !== 'file') {
      attrs.value = locals.value;
    }
    attrs.onChange = locals.type === 'file' ? function (evt) {
      return locals.onChange(evt.target.files[0]);
    } : function (evt) {
      return locals.onChange(evt.target.value);
    };

    if (locals.help) {
      attrs['aria-describedby'] = attrs['aria-describedby'] || attrs.id + '-tip';
    }
    return attrs;
  };

  textbox.renderHiddenTextbox = overrides.renderHiddenTextbox || function renderHiddenTextbox(locals) {
    return _react2['default'].createElement('input', { type: 'hidden', value: locals.value, name: locals.attrs.name });
  };

  textbox.renderStatic = overrides.renderStatic || function renderStatic(locals) {
    return locals.value;
  };

  textbox.renderTextbox = overrides.renderTextbox || function renderTextbox(locals) {
    if (locals.type === 'static') {
      return textbox.renderStatic(locals);
    }
    return locals.type !== 'textarea' ? textbox.renderInput(locals) : textbox.renderTextarea(locals);
  };

  textbox.renderInput = overrides.renderInput || function renderInput(locals) {
    return _react2['default'].createElement('input', locals.attrs);
  };

  textbox.renderTextarea = overrides.renderTextarea || function renderTextarea(locals) {
    return _react2['default'].createElement('textarea', locals.attrs);
  };

  textbox.renderLabel = overrides.renderLabel || function renderLabel(locals) {
    return _getLabel2['default']({
      label: locals.label,
      htmlFor: locals.attrs.id,
      breakpoints: locals.config.horizontal
    });
  };

  textbox.renderError = overrides.renderError || function renderError(locals) {
    return _getError2['default'](locals);
  };

  textbox.renderHelp = overrides.renderHelp || function renderHelp(locals) {
    return _getHelp2['default'](locals);
  };

  textbox.renderVertical = overrides.renderVertical || function renderVertical(locals) {
    var _className;

    var className = (_className = {
      field: true,
      error: locals.hasError,
      disabled: locals.disabled
    }, _className['field-depth-' + locals.path.length] = true, _className['field-' + locals.path.join('-')] = locals.path.length > 0, _className);
    return _react2['default'].createElement(
      'div',
      { className: _classnames2['default'](className) },
      textbox.renderLabel(locals),
      textbox.renderTextbox(locals),
      textbox.renderError(locals),
      textbox.renderHelp(locals)
    );
  };

  textbox.clone = function clone() {
    var newOverrides = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    return create(_extends({}, overrides, newOverrides));
  };

  return textbox;
}

exports['default'] = create();
module.exports = exports['default'];