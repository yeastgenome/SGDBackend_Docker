'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _getLabel = require('./getLabel');

var _getLabel2 = _interopRequireDefault(_getLabel);

var _getError = require('./getError');

var _getError2 = _interopRequireDefault(_getError);

var _getHelp = require('./getHelp');

var _getHelp2 = _interopRequireDefault(_getHelp);

function create() {
  var overrides = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  function radio(locals) {
    return radio.renderVertical(locals);
  }

  radio.renderRadios = overrides.renderRadios || function renderRadios(locals) {
    var id = locals.attrs.id;
    var onChange = function onChange(evt) {
      return locals.onChange(evt.target.value);
    };

    return locals.options.map(function (option, i) {
      var attrs = _extends({}, locals.attrs);
      attrs.type = 'radio';
      attrs.checked = option.value === locals.value;
      attrs.disabled = locals.disabled;
      attrs.value = option.value;
      attrs.autoFocus = attrs.autoFocus && i === 0;
      attrs.id = id + '_' + i;
      attrs['aria-describedby'] = attrs['aria-describedby'] || (locals.label ? id : null);
      attrs.onChange = onChange;

      return _react2['default'].createElement(
        'div',
        { key: option.value, className: 'field' },
        _react2['default'].createElement(
          'div',
          { className: 'ui radio checkbox' },
          _react2['default'].createElement('input', attrs),
          _react2['default'].createElement(
            'label',
            { onClick: function () {
                return document.getElementById(attrs.id).click();
              } },
            option.text
          )
        )
      );
    });
  };

  radio.renderLabel = overrides.renderLabel || function renderLabel(locals) {
    return _getLabel2['default']({
      label: locals.label,
      htmlFor: locals.attrs.id,
      breakpoints: locals.config.horizontal
    });
  };

  radio.renderError = overrides.renderError || function renderError(locals) {
    return _getError2['default'](locals);
  };

  radio.renderHelp = overrides.renderHelp || function renderHelp(locals) {
    return _getHelp2['default'](locals);
  };

  radio.renderVertical = overrides.renderVertical || function renderVertical(locals) {
    var _className;

    var className = (_className = {
      field: true,
      error: locals.hasError,
      disabled: locals.disabled
    }, _className['field-depth-' + locals.path.length] = true, _className['field-' + locals.path.join('-')] = locals.path.length > 0, _className);
    return _react2['default'].createElement(
      'div',
      { className: _classnames2['default'](className) },
      radio.renderLabel(locals),
      radio.renderRadios(locals),
      radio.renderError(locals),
      radio.renderHelp(locals)
    );
  };

  radio.clone = function clone() {
    var newOverrides = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    return create(_extends({}, overrides, newOverrides));
  };

  return radio;
}

exports['default'] = create();
module.exports = exports['default'];